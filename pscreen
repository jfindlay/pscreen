#!/usr/bin/env python

import os,sys,re
from subprocess import call,Popen,PIPE

profile_dir = os.path.join(os.environ['HOME'],'.config/screen/profiles')

class Profiles:
  def __init__(self,profile_dir):
    ls = Popen(['ls',profile_dir],stdout=PIPE)
    self.profile_list = re.split('\s+',ls.stdout.read()[:-1])
    ls.stdout.close()
    self.matches = {}
  def report(self,sessions):
    if len(self.profile_list) == 0:
      return ''
    output = '[01;34m[Kavailable profiles:[m[K\n'
    for profile in self.profile_list:
      if not profile in sessions.session_list.keys():
        if profile in self.matches.keys():
          output += '\t' + self.matches[profile][0]
          output += '[01;31m[K' + self.matches[profile][1] + '[m[K'
          output += self.matches[profile][2] + '\n'
        else:
          output += '\t' + profile + '\n'
    return output
  def match(self,arg):
    match_list = []
    for profile in self.profile_list:
      match = re.search(r'^(.*)(%s)(.*)$' % sys.argv[1],profile)
      if match:
        self.matches[match.group(0)] = (match.group(1),match.group(2),match.group(3))
        match_list.append(match.group(0))
    return match_list

class Sessions:
  def __init__(self):
    screen = Popen(['screen','-ls'],stdout=PIPE)
    screen_output = re.split('\n',screen.stdout.read())[1:-3]
    screen.stdout.close()
    self.session_list = {}
    self.matches = {}
    for line in screen_output:
      match = re.search('^\s+\d+\.(\S+).+\((\w+)\)$',line)
      self.session_list[match.group(1)] = match.group(2)
  def report(self):
    if len(self.session_list) == 0:
      return ''
    output = '[01;34m[Kinstantiated profiles:[m[K\n'
    for session in self.session_list:
      if session in self.matches.keys():
        output += '\t' + self.matches[session][0]
        output += '[01;31m[K' + self.matches[session][1] + '[m[K'
        output += self.matches[session][2]
        if self.session_list[session] == 'Attached':
          output += '  [01;32m[K[%s][m[K' % self.session_list[session]
        output += '\n'
      else:
        output += '\t' + session
        if self.session_list[session] == 'Attached':
          output += '  [01;32m[K[%s][m[K' % self.session_list[session]
        output += '\n'
    return output
  def match(self,arg):
    match_list = []
    for session in self.session_list:
      match = re.search(r'^(.*)(%s)(.*)$' % sys.argv[1],session)
      if match:
        self.matches[match.group(0)] = (match.group(1),match.group(2),match.group(3))
        match_list.append(match.group(0))
    return match_list

def main():
  profiles = Profiles(profile_dir)
  sessions = Sessions()
  output = sessions.report() + profiles.report(sessions)

  try:
    arg = sys.argv[1]
  except:
    print output
    sys.exit(0)

  match_set = set(profiles.match(arg) + sessions.match(arg))
  if 0 == len(match_set):
    print 'no screen profiles in %s match %s' % (profile_dir,sys.argv[1])
  elif 1 == len(match_set):
    profile = match_set.pop()
    if profile in sessions.session_list.keys():
      call(['screen','-dr',profile])
    else:
      call(['screen','-c',os.path.join(profile_dir,profile)])
  else:
    print 'which profile do you want?\n'
    print sessions.report() + profiles.report(sessions)

if __name__ == '__main__' : main()
