#!/usr/bin/env python
# pscreen - manage and interface with multiple screen profiles easily
# Copyright (C) 2011  Justin Findlay
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os,sys,stat
from getpass import getuser
from subprocess import call,Popen,PIPE
from argparse import ArgumentParser,ArgumentTypeError,ArgumentDefaultsHelpFormatter


def syscmd(*cmd):
  '''
  run a system command
  '''
  out,err = Popen(cmd,stdout=PIPE,stderr=PIPE).communicate()
  return out.decode().strip(),err.decode().strip()


class TextFormat(object):
  '''
  ANSI Select Graphic Rendition (SGR) code escape sequence.
  '''
  prefix = '\x1b['
  suffix = 'm'
  all_codes = {
    'reset': '0',

    'bold': '1',
    'faint': '2',
    'italic': '3',
    'underline': '4',

    'black': '30',
    'red': '31',
    'green': '32',
    'yellow': '33',
    'blue': '34',
    'magenta': '35',
    'cyan': '36',
    'white': '37',
    'extended': '38',
    'default': '39',
  }

  def __init__(self,*attrs,**kwargs):
    '''
    Example:

    .. code-block:: python

        red_underlined = TextFormat('red','underline')
        print(
          '{0}Can you read this?{1}'
        ).format(red_underlined,TextFormat('reset'))
    '''
    self.codes = [self.all_codes[attr.lower()] for attr in attrs if isinstance(attr,str)]

    if kwargs.get('reset',True):
      self.codes[:0] = [self.all_codes['reset']]

    if kwargs.get('no_color',False):
      self.sequence = ''
    else:
      self.sequence = '%s%s%s' % (self.prefix,';'.join(self.codes),self.suffix)

  def __call__(self,text,reset=True):
    '''
    Example:

    .. code-block:: python

        green_text = TextFormat('blink','green')
        'The answer is: {0}'.format(green_text(42))
    '''
    end = TextFormat('reset') if reset else ''
    return '%s%s%s' % (self.sequence,text,end)

  def __str__(self):
    return self.sequence

  def __repr__(self):
    return self.sequence


class Profiles:
  def __init__(self,**kwargs):
    self.screen_exec = kwargs['screen_exec']
    self.prof_dir = kwargs['prof_dir']
    self.selected = kwargs['profile']
    self.no_color = kwargs['no_color']
    self.data = {}

    self.find_profiles()
    self.find_sessions()
    self.select()

  def find_profiles(self):
    '''
    collect the profile names in prof_dir
    '''
    for name in os.listdir(self.prof_dir):
      if os.path.isfile(os.path.join(self.prof_dir,name)):
        self.data[name] = {'state':None}

  def find_sessions(self):
    '''
    find which profiles are instantiated as sessions
    '''
    syscmd(self.screen_exec,'-wipe') # clear any possible dead sessions
    screen_output = syscmd(self.screen_exec,'-ls')[0]

    for line in screen_output.split(os.linesep)[1:-1]:
      split_line = line.split()
      screen_name,screen_state = split_line[0],split_line[-1]
      pid,name = screen_name.split('.',1)
      state = screen_state.lstrip('(').rstrip(')')

      if state == 'Attached':   state = True
      elif state == 'Detached': state = False
      else:                     state = None

      self.data[name] = {'state':state}

  def select(self):
    '''
    select chosen profile
    '''
    if self.selected:
      self.match()
      matches = [self.data[name]['match'] for name in self.data if self.data[name].get('match')]

      if 0 == len(matches):
        print('no screen profiles in {d} match {s}'.format(d=self.prof_dir,s=self.selected))
        self.report()
      elif 1 == len(matches):
        name = ''.join(matches[0])
        state = self.data[name]['state']
        if state is None:
          call((self.screen_exec,'-c',os.path.join(self.prof_dir,name)))
        elif state is True:
          call((self.screen_exec,'-dr',name))
        elif state is False:
          call((self.screen_exec,'-r',name))
      else:
        print('select a profile\n'.format(self.selected))
        self.report()
    else:
      self.report()

  def match(self):
    '''
    update self.data profiles matching user-supplied profile name in the form
    (pre,match,post), where match is the text in each matching profile name
    that matches and pre and post are the surrounding characters
    '''
    matches = []

    for name in self.data:
      if self.selected in name:
        if name in self.selected:
          matches = [('',name,'')] # exact match
          break
        pre,post = name.split(self.selected,1)
        matches.append((pre,self.selected,post))

    for match in matches:
      self.data[''.join(match)]['match'] = match

  def report(self):
    '''
    print a list of profiles with portions of profile names that match
    user-supplied selection highlighted
    '''
    title_fmt = TextFormat('blue','bold',no_color=self.no_color)
    match_fmt = TextFormat('red','bold',no_color=self.no_color)
    state_fmt = TextFormat('green','bold',no_color=self.no_color)

    def report_profile(name):
      '''
      construct a report for a profile, highlighting the matched portion of the
      profile name, and indicating whether it is attached
      '''
      output = ''
      match = self.data[name].get('match')
      if match:
        output += '\t' + match[0] + match_fmt(match[1]) + match[2]
      else:
        output += '\t' + name
      if self.data[name]['state'] is True:
        output += state_fmt('  [Attached]')
      return output

    inst_output = [title_fmt('instantiated profiles:')]
    uninst_output = [title_fmt('available profiles:')]

    for name in sorted(self.data.keys()):
      state = self.data[name]['state']
      if state is True or state is False:
        inst_output.append(report_profile(name))
      elif state is None:
        uninst_output.append(report_profile(name))

    print('\n'.join(inst_output + uninst_output))


def get_opts():
  '''
  setup program options
  '''
  def get_version():
    '''
    retrieve program version
    '''
    return '1.2'

  def directory(d):
    '''
    check whether the supplied directory exists, create it if it doesn't, and
    exit if it is not a directory
    '''
    if not os.path.exists(d):
      if not os.path.islink(d):
        os.makedirs(d)
        return d
      raise ArgumentTypeError('{d} exists and is not a directory'.format(d=directory))
    elif os.path.isdir(d):
      return d
    raise ArgumentTypeError('cannot create directory {d}'.format(d=directory))

  def exe(p):
    '''
    check whether the supplied path exists and is executable
    '''
    if not len(p):
      raise ArgumentTypeError('no screen executable found')
    if not os.path.isfile(p):
      raise ArgumentTypeError('path to screen executable {p} is not a file')
    if not os.access(p,os.X_OK):
      raise ArgumentTypeError('screen program {p} not executable')
    return p

  screen_exec = syscmd('which','screen')[0]
  prof_dir = directory(os.path.join(os.environ['HOME'],'.local/share/pscreen/profiles'))

  def parse_args():
    description='easily manage and interface with multiple screen profiles'
    epilog='if no arguments are given, %(prog)s will list all available and instantiated screen profiles'
    arg_parser = ArgumentParser(description=description,epilog=epilog,formatter_class=ArgumentDefaultsHelpFormatter)
    arg_parser.add_argument('-v','--version',action='version',version='%(prog)s-{0}'.format(get_version()),help='show version')
    arg_parser.add_argument('-s','--screen-exec',type=exe,default=screen_exec,help='path to screen executable')
    arg_parser.add_argument('-d','--prof-dir',type=directory,default=prof_dir,help='directory containing screen profiles')
    arg_parser.add_argument('-n','--no-color',action='store_true',help='disable colorized output')
    arg_parser.add_argument('profile',nargs='?',type=str,help='screen profile to {attach|instantiate}')
    return vars(arg_parser.parse_args())

  return parse_args()


def main():
  '''
  run pscreen
  '''
  Profiles(**get_opts())

if __name__ == '__main__':
  try:
    main()
  except KeyboardInterrupt:
    sys.exit()
