#!/usr/bin/env python
# pscreen - manage and interface with multiple screen profiles easily
# Copyright (C) 2011  Justin Findlay
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os,sys,re
from subprocess import call,Popen,PIPE
from argparse import ArgumentParser,ArgumentTypeError

class Profiles:
  def __init__(self,*args,**kwargs):
    self.prof_pattern = kwargs['prof_pattern']
    self.profile_dict = {}
    self.prof_dir = kwargs['prof_dir']
    self.find_profiles()
    self.find_sessions()
    self.matches = {}
    if self.prof_pattern:
      self.match()
      match_set = set(self.matches)
      if 0 == len(match_set):   # user-supplied profile pattern matches no profiles
        print('no screen profiles in {d} match {p}'.format(d=self.prof_dir,p=self.prof_pattern))
      elif 1 == len(match_set): # user-supplied profile pattern matches one profile
        profile = match_set.pop()
        if self.profile_dict[profile]['state'] == '':
          call(('screen','-c',os.path.join(self.prof_dir,profile)))
        if self.profile_dict[profile]['state'] == 'Attached':
          call(('screen','-dr',profile))
        if self.profile_dict[profile]['state'] == 'Detached':
          call(('screen','-r',profile))
      else:                     # user-supplied profile pattern matches multiple profiles
        print('which profile do you want?\n')
    print(self.report())
  def find_profiles(self):
    '''
    collect the profile names in prof_dir
    '''
    for profile in os.listdir(self.prof_dir):
      self.profile_dict[profile] = {'state':''} # instantiated profiles tell whether they're attached
  def find_sessions(self):
    '''
    find which profiles are instantiated as sessions
    '''
    screen = Popen(['screen','-ls'],stdout=PIPE,close_fds=True)
    screen_output = re.split('\n',screen.stdout.read().decode())[1:-3]
    screen.stdout.close()
    self.session_dict = {}
    for line in screen_output:
      match = re.search(r'^\s+\d+\.(?P<name>\S+).+\((?P<state>\w+)\)$',line)
      if not match.group('name') in self.profile_dict:
        self.profile_dict[match.group('name')] = {}
      self.profile_dict[match.group('name')]['state'] = match.group('state') # '','attached','detached'
  def match(self):
    '''
    find and return list of profiles matching user-supplied profile name
    pattern
    '''
    for profile in self.profile_dict:
      match = re.search(r'^(.*)({p})(.*)$'.format(p=self.prof_pattern),profile)
      if match:
        self.matches[match.group(0)] = (match.group(1),match.group(2),match.group(3))
  def report(self):
    '''
    return a list of profiles with portions of profile names that match
    user-supplied invocation pattern highlighted
    '''
    output = '[01;34m[Kinstantiated profiles:[m[K\n'
    for profile in sorted(self.profile_dict.keys()):
      if self.profile_dict[profile]['state']:     # if profile instantiated
        output += self.report_profile(profile)
    output += '[01;34m[Kavailable profiles:[m[K\n'
    for profile in sorted(self.profile_dict.keys()):
      if not self.profile_dict[profile]['state']: # if profile not instantiated
        output += self.report_profile(profile)
    return output
  def report_profile(self,profile):
    output = ''
    if profile in self.matches.keys():
      output += '\t' + self.matches[profile][0]                         # print first part of profile name
      output += '[01;31m[K' + self.matches[profile][1] + '[m[K' # print matching part
      output += self.matches[profile][2]                                # print last part (only one match per name)
    else:
      output += '\t' + profile
    if self.profile_dict[profile]['state'] == 'Attached':
      output += '  [01;32m[K[{s}][m[K'.format(s=self.profile_dict[profile]['state'])
    output += '\n'
    return output

def main():
  def get_version():
    #return Popen(('git','describe'),stdout=PIPE).stdout.read()
    return '1.1'
  def directory(d):
    '''
    check whether the supplied directory exists, create it if it doesn't, and
    exit if it is not a directory
    '''
    if not os.path.exists(d):
      if not os.path.islink(d):
        os.makedirs(d)
        return d
      raise ArgumentTypeError('{d} exists and is not a directory'.format(d=directory))
    elif os.path.isdir(d):
      return d
    raise ArgumentTypeError('cannot create directory {d}'.format(d=directory))
  def parse_args(prof_dir):
    description='easily manage and interface with multiple screen profiles'
    epilog='if no arguments are given, %(prog)s will list all available and instantiated screen profiles'
    arg_parser = ArgumentParser(description=description,epilog=epilog)
    arg_parser.add_argument('-v','--version',action='version',version='%(prog)s-{0}'.format(get_version()),help='show version')
    arg_parser.add_argument('-d','--prof-dir',nargs=1,type=directory,default=prof_dir,help='choose directory containing screen profiles [default:%(default)s]')
    arg_parser.add_argument('prof_pattern',nargs='?',type=str,help='screen profile to {attach|instantiate}')
    return vars(arg_parser.parse_args())

  prof_dir = directory(os.path.join(os.environ['HOME'],'.config/screen/profiles'))
  Profiles(**parse_args(prof_dir))

if __name__ == '__main__':
  try:
    main()
  except KeyboardInterrupt:
    sys.exit()
